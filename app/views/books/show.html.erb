<h1> <%= @book.title %> </h1> 
<h3>By <%= @book.author.full_name %> </h3>

<%# cl_image_tag is a method Cloudinary gives us, but we need to pass it a key, not an image. Hence '@book.cover.key' %>
<%# We then need to tell it we want to 'crop', and specifically, 'scale', in this case off width: %>
<%# We can manually create alternate version of the image in Cloudinary, which will also then funciton as a list of functions we can perform on animage %>
<%# If we do this is Cloudinary, it will also give us the code to do the same in our app, in various languages: Ruby, HTML, Python, Node.js, etc %>
<%# Cloudinary will create and save the altered version of the image, rather than alter it each time it is accessed. Cloudinary ALSO creates thumbnails the the code to use them %>
<%= (cl_image_tag @book.cover.key, crop: :scale, width: 150, cloud_name: "champdogcode") if @book.cover.attached? %>

<%# Wrapping this in the 'if' statement means anyone not logged in will not see the edit/delete buttons, as they can't access them anyway %>
<% if policy(@book).edit_or_destroy? %>
  <div class="btn-toolbar mt-3">
    <%= link_to('Edit', edit_book_path(@book), class: 'btn btn-warning me-2') if policy(@book).edit? %>
    <%= button_to('Delete', @book, class: 'btn btn-danger', method: :delete, form: { data: { turbo_confirm: "Are you sure you want to delete '#{@book.title}' ?" } }) if policy(@book).destroy? %>
  </div>
<% end %>
<%# The "if policy" statement above tells the app to run/check the book policy, then only provide the link if the policy passes (i.e., if the user is authorised) %>